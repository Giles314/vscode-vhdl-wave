{
  "name": "vhdl-wave",
  "displayName": "VHDL-Wave",
  "description": "VSCode extension for VHDL simulation with GHDL and GTKWave and synthesis for GateMate FPGA",
  "publisher": "Giles314",
  "version": "2.1.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/Giles314/vscode-vhdl-wave"
  },
  "homepage": "https://github.com/Giles314/vscode-vhdl-wave",
  "license": "SEE LICENSE in LICENSE.md",
  "bugs": {
    "url": "https://github.com/Giles314/vscode-vhdl-wave/issues"
  },
  "icon": "res/icon.png",
  "galleryBanner": {
    "color": "#C99643",
    "theme": "dark"
  },
  "engines": {
    "vscode": "^1.92.0"
  },
  "categories": [
    "Programming Languages",
    "Other"
  ],
  "keywords": [
    "ghdl",
    "GHDL",
    "hdl",
    "vhdl",
    "VHDL",
    "gtkwave",
    "GTKWave",
    "GateMate"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./src/vhdlWave.js",
  "contributes": {
    "commands": [
      {
        "command": "extension.editor_ghdl-analyze_file",
        "title": "Analyze file"
      },
      {
        "command": "extension.editor_ghdl-elaborate_file",
        "title": "Elaborate file"
      },
      {
        "command": "extension.editor_ghdl-run_unit",
        "title": "Run unit"
      },
      {
        "command": "extension.editor_ghdl-make_unit",
        "title": "Make unit"
      },
      {
        "command": "extension.editor_ghdl-remove",
        "title": "Remove"
      },
      {
        "command": "extension.editor_yosys-synth",
        "title": "Synthesize"
      },
      {
        "command": "extension.editor_place&route",
        "title": "Place & Route"
      },
      {
        "command": "extension.editor_load-FPGA",
        "title": "Load FPGA"
      },
      {
        "command": "extension.explorer_ghdl-analyze_file",
        "title": "Analyze file"
      },
      {
        "command": "extension.explorer_ghdl-elaborate_file",
        "title": "Elaborate file"
      },
      {
        "command": "extension.explorer_ghdl-run_unit",
        "title": "Run unit"
      },
      {
        "command": "extension.explorer_ghdl-make_unit",
        "title": "Make unit"
      },
      {
        "command": "extension.explorer_ghdl-remove",
        "title": "Remove"
      },
      {
        "command": "extension.explorer_gtkwave",
        "title": "GTKWave"
      },
      {
        "command": "extension.explorer_yosys-synth",
        "title": "Synthesize"
      },
      {
        "command": "extension.explorer_place&route",
        "title": "Place & Route"
      },
      {
        "command": "extension.explorer_load-FPGA",
        "title": "Load FPGA"
      },
      {
        "command": "extension.create_build_dir",
        "title": "VHDL-Wave: Create build directory"
      }
    ],
    "configuration": [
      {
        "title": "GHDL Interface",
        "properties": {
          "vhdl-wave.library.WorkLibraryName": {
            "type": "string",
            "scope": "resource",
            "default": "",
            "description": "Specifies the name of the 'WORK' library. Set to the default name 'WORK' if left blank."
          },
          "vhdl-wave.library.BuildRootPath": {
            "type": "string",
            "scope": "resource",
            "default": "",
            "description": "Specifies the directory where the generated files will be stored. Paths relative to the project folder are allowed and recommended. Set to the './build' directory if left blank. It should not contain any source file."
          },
          "vhdl-wave.library.WorkLibraryPath": {
            "type": "string",
            "scope": "resource",
            "default": "",
            "description": "Specifies the directory where the 'WORK' library is located. This directory will also be used to store synthesis results. This directory MUST exist before using any command. Paths relative to the BuildRootPath folder are allowed. Set to the BuildRootPath directory if left blank."
          },
          "vhdl-wave.library.LibraryDirectories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "scope": "resource",
            "default": "",
            "format": "uri",
            "description": "Specifies the directory paths where GHDL searchs for '.cf' library files (not used if left blank)"
          },
          "vhdl-wave.library.SourceFiles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "scope": "resource",
            "default": [ "./src/**/*.vhd<l|>" ],
            "description": "Specifies the files that are part of the Cologne Chip GateMate project. Chech README for wild card syntax."
          },
          "vhdl-wave.simulation.WaveDirPath": {
            "type": "string",
            "scope": "resource",
            "default": "",
            "description": "Specifies the directory to use to store simulation results. When empty, default to BuildRootPath. Relative paths from workspace root directory are accepted."
          },
          "vhdl-wave.simulation.TimeResolution": {
            "type": "string",
            "scope": "resource",
            "default": "fs",
            "enum": [
              "auto",
              "fs",
              "ps",
              "ns",
              "us",
              "ms",
              "sec"
            ],
            "description": "Sets the base time resolution for the simulation. It must be the same resolution that GTKWave will use. In case of discrepency GTKWave graphic scale will be wrong."
          },
          "vhdl-wave.simulation.StopTime": {
            "type": "string",
            "scope": "resource",
            "default": "1sec",
            "description": "Sets the maximum duration of the simulation"
          },
          "vhdl-wave.standard.VHDL": {
            "type": "string",
            "scope": "resource",
            "default": "93c",
            "enum": [
              "87",
              "93",
              "93c",
              "00",
              "02",
              "08"
            ],
            "description": "Specifies the VHDL language version to use"
          },
          "vhdl-wave.standard.IEEE": {
            "type": "string",
            "scope": "resource",
            "default": "standard",
            "enum": [
              "none",
              "standard",
              "synopsis"
            ],
            "description": "Specifies VHDL standard library to use"
          },
          "vhdl-wave.general.verbose": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Tells GHDL to be verbose"
          },
          "vhdl-wave.general.RelaxedRules": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Set relaxed rules to be compatible with other simulators or synthesizers"
          },
          "vhdl-wave.general.vitalChecks": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Enable checks of restriction on VITAL units"
          },
          "vhdl-wave.general.PSL": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Enable parsing of PSL assertions within comments"
          },
          "vhdl-wave.general.explicit": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "When two operators are overloaded, give preference to the explicit declaration"
          },
          "vhdl-wave.general.synBinding": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Use synthesizer rules for component binding"
          },
          "vhdl-wave.general.mbComments": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Allow UTF8 or multi-bytes chars in a comment"
          },
          "vhdl-wave.general.enableLsToml": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Allow generation of the vhdl-ls.toml file in the root directory of the workspace folder for use by extension VHDL-LS"
          },
          "vhdl-wave.toolChain.loadInterface": {
            "type": "string",
            "scope": "resource",
            "default": "dirtyjtag-jtag-fpga",
            "enum": [
              "dirtyjtag-jtag-fpga",
              "dirtyjtag-jtag-flash",
              "gatemate-evb-jtag-fpga",
              "gatemate-evb-spi-fpga",
              "gatemate-evb-jtag-flash",
              "gatemate-evb-spi-flash"
            ],
            "description": "Specifies the interface to use to load the bitstream into the FPGA or its flash memory"
          }
        }
      }
    ],
    "submenus": [
      {
        "id": "ghdl.editor_submenu",
        "label": "VHDL-Wave"
      },
      {
        "id": "ghdl.explorer_submenu",
        "label": "VHDL-Wave"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "isValidBuildDir && (resourceExtname == .vhdl || resourceExtname == .vhd || resourceExtname == .vht)",
          "submenu": "ghdl.editor_submenu",
          "group": "1_modification@2"
        },
        {
          "when": "! isValidBuildDir",
          "command": "extension.create_build_dir",
          "group": "1_modification@2"
        }
      ],
      "ghdl.editor_submenu": [
        {
          "when": "resourceExtname != .vht",
          "command": "extension.editor_ghdl-analyze_file",
          "group": "ghdl_editor@1"
        },
        {
          "command": "extension.editor_ghdl-elaborate_file",
          "group": "ghdl_editor@2"
        },
        {
          "command": "extension.editor_ghdl-run_unit",
          "group": "ghdl_editor@3"
        },
        {
          "command": "extension.editor_ghdl-make_unit",
          "group": "ghdl_editor@4"
        },
        {
          "command": "extension.editor_ghdl-remove",
          "group": "ghdl_editor@5"
        },
        {
          "command": "extension.editor_yosys-synth",
          "group": "ghdl_editor@6"
        },
        {
          "command": "extension.editor_place&route",
          "group": "ghdl_editor@7"
        },
        {
          "command": "extension.editor_load-FPGA",
          "group": "ghdl_editor@8"
        }
      ],
      "explorer/context": [
        {
          "when": "isValidBuildDir && (resourceExtname == .vhdl || resourceExtname == .vhd || resourceExtname == .vht)",
          "submenu": "ghdl.explorer_submenu",
          "group": "7_modification@3"
        },
        {
          "when": "isValidBuildDir && (resourceExtname == .ghw || resourceExtname == .vcd)",
          "command": "extension.explorer_gtkwave",
          "group": "7_modification@4"
        },
        {
          "when": "! isValidBuildDir",
          "command": "extension.create_build_dir",
          "group": "7_modification@3"
        }
      ],
      "ghdl.explorer_submenu": [
        {
          "when": "resourceExtname != .vht",
          "command": "extension.explorer_ghdl-analyze_file",
          "group": "ghdl_explorer@1"
        },
        {
          "command": "extension.explorer_ghdl-elaborate_file",
          "group": "ghdl_explorer@2"
        },
        {
          "command": "extension.explorer_ghdl-run_unit",
          "group": "ghdl_explorer@3"
        },
        {
          "command": "extension.explorer_ghdl-make_unit",
          "group": "ghdl_explorer@4"
        },
        {
          "command": "extension.explorer_ghdl-remove",
          "group": "ghdl_explorer@5"
        },
        {
          "command": "extension.explorer_yosys-synth",
          "group": "ghdl_explorer@6"
        },
        {
          "command": "extension.explorer_place&route",
          "group": "ghdl_explorer@7"
        },
        {
          "command": "extension.explorer_load-FPGA",
          "group": "ghdl_explorer@8"
        }
      ]
    },
    "keybindings": [
      {
        "command": "extension.editor_ghdl-analyze_file",
        "key": "ctrl+alt+a",
        "mac": "shift+cmd+a",
        "linux": "shift+alt+a"
      },
      {
        "command": "extension.editor_ghdl-elaborate_file",
        "key": "ctrl+alt+l",
        "mac": "shift+cmd+e",
        "linux": "shift+alt+e"
      },
      {
        "command": "extension.editor_ghdl-run_unit",
        "key": "ctrl+alt+r",
        "mac": "shift+cmd+r",
        "linux": "shift+alt+r"
      },
      {
        "command": "extension.editor_ghdl-make_unit",
        "key": "ctrl+alt+m",
        "mac": "shift+cmd+m",
        "linux": "shift+alt+m"
      },
      {
        "command": "extension.editor_ghdl-remove",
        "key": "ctrl+alt+d",
        "mac": "shift+cmd+d",
        "linux": "shift+alt+d"
      },
      {
        "command": "extension.editor_yosys-synth",
        "key": "ctrl+alt+s",
        "mac": "shift+cmd+s",
        "linux": "shift+alt+s"
      },
      {
        "command": "extension.explorer_ghdl-analyze_file",
        "key": "ctrl+alt+a",
        "mac": "shift+cmd+a",
        "linux": "shift+alt+a"
      },
      {
        "command": "extension.explorer_ghdl-elaborate_file",
        "key": "ctrl+alt+l",
        "mac": "shift+cmd+e",
        "linux": "shift+alt+e"
      },
      {
        "command": "extension.explorer_ghdl-run_unit",
        "key": "ctrl+alt+r",
        "mac": "shift+cmd+r",
        "linux": "shift+alt+r"
      },
      {
        "command": "extension.explorer_ghdl-make_unit",
        "key": "ctrl+alt+m",
        "mac": "shift+cmd+m",
        "linux": "shift+alt+m"
      },
      {
        "command": "extension.explorer_ghdl-remove",
        "key": "ctrl+alt+d",
        "mac": "shift+cmd+d",
        "linux": "shift+alt+d"
      },
      {
        "command": "extension.explorer_gtkwave",
        "key": "ctrl+alt+g",
        "mac": "shift+cmd+g",
        "linux": "shift+alt+g"
      },
      {
        "command": "extension.explorer_yosys-synth",
        "key": "ctrl+alt+s",
        "mac": "shift+cmd+s",
        "linux": "shift+alt+s"
      },
      {
        "command": "extension.explorer_place&route",
        "key": "ctrl+alt+p",
        "mac": "shift+cmd+p",
        "linux": "shift+alt+p"
      },
      {
        "command": "extension.explorer_load-FPGA",
        "key": "ctrl+alt+f",
        "mac": "shift+cmd+f",
        "linux": "shift+alt+f"
      }
    ],
    "languages": [
      {
        "id": "vhdl",
        "extensions": [
          ".vhd",
          ".vhdl",
          ".VHD",
          ".VHDL"
        ]
      }
    ]
  },
  "scripts": {
    "lint": "eslint .",
    "pretest": "npm run lint",
    "compile": "webpack --mode development",
    "watch": "webpack --watch",
    "vscode:prepublish": "npm run package",
    "package": "webpack --mode=production --devtool hidden-source-map",
    "build": "webpack --mode=production --node-env=production",
    "build:dev": "webpack --mode=development",
    "build:prod": "webpack --mode=production --node-env=production",
    "vsce": "vsce package"
  },
  "dependencies": {
    "mocha": "^11.1.0",
    "webpack": "^5.97.1"
  },
  "devDependencies": {
    "webpack-cli": "^6.0.1"
  }
}
